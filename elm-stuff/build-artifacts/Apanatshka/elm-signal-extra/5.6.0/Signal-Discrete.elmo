Elm.Signal = Elm.Signal || {};
Elm.Signal.Discrete = Elm.Signal.Discrete || {};
Elm.Signal.Discrete.make = function (_elm) {
   "use strict";
   _elm.Signal = _elm.Signal || {};
   _elm.Signal.Discrete = _elm.Signal.Discrete || {};
   if (_elm.Signal.Discrete.values)
   return _elm.Signal.Discrete.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Signal.Discrete",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var folde = F3(function (step,
   base,
   evt) {
      return A3($Signal.foldp,
      F2(function (_v0,b) {
         return function () {
            return step(b);
         }();
      }),
      base,
      evt);
   });
   var es = $Signal.map($Basics.always({ctor: "_Tuple0"}));
   var whenEqual = F2(function (value,
   input) {
      return function () {
         var keepIf = $Signal.filter;
         var matchEvent = A3(keepIf,
         F2(function (x,y) {
            return _U.eq(x,y);
         })(value),
         value,
         input);
         return es(matchEvent);
      }();
   });
   var whenChangeTo = F2(function (value,
   input) {
      return whenEqual(value)($Signal.dropRepeats(input));
   });
   var whenChange = function (input) {
      return es($Signal.dropRepeats(input));
   };
   _elm.Signal.Discrete.values = {_op: _op
                                 ,es: es
                                 ,whenEqual: whenEqual
                                 ,whenChange: whenChange
                                 ,whenChangeTo: whenChangeTo
                                 ,folde: folde};
   return _elm.Signal.Discrete.values;
};