Elm.StartApp = Elm.StartApp || {};
Elm.StartApp.make = function (_elm) {
   "use strict";
   _elm.StartApp = _elm.StartApp || {};
   if (_elm.StartApp.values)
   return _elm.StartApp.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "StartApp",
   $Basics = Elm.Basics.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var start = function (config) {
      return function () {
         var updateStep = F2(function (action,
         _v0) {
            return function () {
               switch (_v0.ctor)
               {case "_Tuple2":
                  return function () {
                       var $ = A2(config.update,
                       action,
                       _v0._0),
                       newModel = $._0,
                       additionalEffects = $._1;
                       return {ctor: "_Tuple2"
                              ,_0: newModel
                              ,_1: $Effects.batch(_L.fromArray([_v0._1
                                                               ,additionalEffects]))};
                    }();}
               _U.badCase($moduleName,
               "between lines 94 and 97");
            }();
         });
         var update = F2(function (actions,
         _v4) {
            return function () {
               switch (_v4.ctor)
               {case "_Tuple2":
                  return A3($List.foldl,
                    updateStep,
                    {ctor: "_Tuple2"
                    ,_0: _v4._0
                    ,_1: $Effects.none},
                    actions);}
               _U.badCase($moduleName,
               "on line 101, column 13 to 64");
            }();
         });
         var messages = $Signal.mailbox(_L.fromArray([]));
         var singleton = function (action) {
            return _L.fromArray([action]);
         };
         var address = A2($Signal.forwardTo,
         messages.address,
         singleton);
         var inputs = $Signal.mergeMany(A2($List._op["::"],
         messages.signal,
         A2($List.map,
         $Signal.map(singleton),
         config.inputs)));
         var effectsAndModel = A3($Signal.foldp,
         update,
         config.init,
         inputs);
         var model = A2($Signal.map,
         $Basics.fst,
         effectsAndModel);
         return {_: {}
                ,html: A2($Signal.map,
                config.view(address),
                model)
                ,model: model
                ,tasks: A2($Signal.map,
                function ($) {
                   return $Effects.toTask(messages.address)($Basics.snd($));
                },
                effectsAndModel)};
      }();
   };
   var App = F3(function (a,b,c) {
      return {_: {}
             ,html: a
             ,model: b
             ,tasks: c};
   });
   var Config = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,init: a
             ,inputs: d
             ,update: b
             ,view: c};
   });
   _elm.StartApp.values = {_op: _op
                          ,start: start
                          ,Config: Config
                          ,App: App};
   return _elm.StartApp.values;
};