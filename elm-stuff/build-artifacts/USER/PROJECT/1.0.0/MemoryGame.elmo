Elm.MemoryGame = Elm.MemoryGame || {};
Elm.MemoryGame.make = function (_elm) {
   "use strict";
   _elm.MemoryGame = _elm.MemoryGame || {};
   if (_elm.MemoryGame.values)
   return _elm.MemoryGame.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "MemoryGame",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Card = Elm.Card.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Now = Elm.Now.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Random$Array = Elm.Random.Array.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var countOpenCards = function (model) {
      return A3($List.foldr,
      F2(function (cItem,o) {
         return $Card.isOpen(cItem) ? o + 1 : o;
      }),
      0,
      model.cards);
   };
   var closeAllCards = F2(function (id,
   model) {
      return function () {
         var count = countOpenCards(model);
         return _U.cmp(count,
         2) > 0 ? _U.replace([["cards"
                              ,A2($List.map,
                              function (cItem) {
                                 return function () {
                                    var _v0 = {ctor: "_Tuple2"
                                              ,_0: $Card.isOpen(cItem)
                                              ,_1: id};
                                    switch (_v0.ctor)
                                    {case "_Tuple2":
                                       return _U.eq(cItem.id,
                                         _v0._1) ? cItem : $Card.close(cItem);}
                                    _U.badCase($moduleName,
                                    "between lines 157 and 163");
                                 }();
                              },
                              model.cards)]],
         model) : model;
      }();
   });
   var updateCardById = F3(function (status,
   id,
   model) {
      return _U.replace([["cards"
                         ,A2($List.map,
                         function (cItem) {
                            return _U.eq(cItem.id,
                            id) ? A2($Card.update,
                            status,
                            cItem) : cItem;
                         },
                         model.cards)]
                        ,["score",model.score + 1]],
      model);
   });
   var areIdentical = function (list) {
      return function () {
         var l = $List.length(list);
         var f = $List.head(list);
         return function () {
            var _v3 = {ctor: "_Tuple2"
                      ,_0: l
                      ,_1: f};
            switch (_v3.ctor)
            {case "_Tuple2": switch (_v3._0)
                 {case 2: switch (_v3._1.ctor)
                      {case "Just":
                         return A2($List.all,
                           function (x) {
                              return A2($String.contains,
                              x.image,
                              _v3._1._0.image);
                           },
                           list);}
                      break;}
                 return false;}
            _U.badCase($moduleName,
            "between lines 100 and 102");
         }();
      }();
   };
   var lockIfIdentical = F2(function (model,
   list) {
      return function () {
         var identical = areIdentical(list);
         return function () {
            switch (identical)
            {case false: return model;
               case true:
               return $List.map(function (cmodel) {
                    return $Card.isOpen(cmodel) ? $Card.lock(cmodel) : cmodel;
                 })(model);}
            _U.badCase($moduleName,
            "between lines 110 and 116");
         }();
      }();
   });
   var countOpenAllCards = function (model) {
      return A3($List.foldr,
      F2(function (m,i) {
         return $Card.isOpen(m) ? A2($Basics._op["++"],
         i,
         "1 ") : i;
      }),
      "",
      model.cards);
   };
   var getOpenCards = function (model) {
      return A3($List.foldr,
      F2(function (m,i) {
         return $Card.isOpen(m) ? A2($List._op["::"],
         m,
         i) : i;
      }),
      _L.fromArray([]),
      model.cards);
   };
   var updateCardStatus = function (model) {
      return function () {
         var opened = getOpenCards(model);
         return _U.replace([["cards"
                            ,A2(lockIfIdentical,
                            model.cards,
                            opened)]],
         model);
      }();
   };
   var checkAndLock = function (model) {
      return function () {
         var openCards = getOpenCards(model);
         var count = $List.length(openCards);
         var same = areIdentical(openCards);
         return _U.eq(count,
         2) ? function () {
            switch (same)
            {case false: return model;
               case true:
               return _U.replace([["cards"
                                  ,A2($List.map,
                                  function (cItem) {
                                     return $Card.isOpen(cItem) ? $Card.lock(cItem) : cItem;
                                  },
                                  model.cards)]
                                 ,["matched_pair"
                                  ,model.matched_pair + 2]],
                 model);}
            _U.badCase($moduleName,
            "between lines 177 and 186");
         }() : model;
      }();
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Do":
            return closeAllCards(action._0)(checkAndLock(A2(updateCardById,
              action._1,
              action._0)(model)));}
         _U.badCase($moduleName,
         "between lines 192 and 197");
      }();
   });
   var initSeed = $Basics.round($Now.loadTime);
   var shuffle = function (list) {
      return function () {
         var _v12 = A2($Random$Array.shuffle,
         $Random.initialSeed(initSeed),
         $Array.fromList(list));
         switch (_v12.ctor)
         {case "_Tuple2":
            return $Array.toList(_v12._0);}
         _U.badCase($moduleName,
         "between lines 40 and 41");
      }();
   };
   var init = {_: {}
              ,cards: shuffle(A2($List.map,
              function (index) {
                 return A2($Card.initialModel,
                 A2($Basics._op["++"],
                 "images/",
                 A2($Basics._op["++"],
                 $Basics.toString(A2($Basics._op["%"],
                 index,
                 18)),
                 ".png")),
                 index);
              },
              _L.range(1,36)))
              ,matched_pair: 0
              ,score: 0};
   var Do = F2(function (a,b) {
      return {ctor: "Do"
             ,_0: a
             ,_1: b};
   });
   var view = F2(function (address,
   model) {
      return function () {
         var maxCount = $List.length(model.cards);
         return _U.eq(model.matched_pair,
         maxCount) ? A2($Html.div,
         _L.fromArray([]),
         _L.fromArray([$Html.text("You won!!!!! chicken masala")])) : A2($Html.div,
         _L.fromArray([]),
         _L.fromArray([A2($Html.div,
                      _L.fromArray([$Html$Attributes.$class("infoCiewontainer")]),
                      _L.fromArray([$Html.text(A2($Basics._op["++"],
                      "Tries ",
                      $Basics.toString(model.score)))]))
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.$class("infoCiewontainer")]),
                      _L.fromArray([$Html.text(A2($Basics._op["++"],
                      "Locked ",
                      $Basics.toString(model.matched_pair)))]))
                      ,A2($Html.div,
                      _L.fromArray([$Html$Attributes.$class("cardsContainer")]),
                      _L.fromArray([A2($Html.div,
                      _L.fromArray([]),
                      A2($List.map,
                      function (cModel) {
                         return A2($Card.view,
                         A2($Signal.forwardTo,
                         address,
                         Do(cModel.id)),
                         cModel);
                      },
                      model.cards))]))]));
      }();
   });
   var Model = F3(function (a,
   b,
   c) {
      return {_: {}
             ,cards: a
             ,matched_pair: b
             ,score: c};
   });
   var main = $StartApp$Simple.start({_: {}
                                     ,model: init
                                     ,update: update
                                     ,view: view});
   _elm.MemoryGame.values = {_op: _op
                            ,main: main
                            ,Model: Model
                            ,Do: Do
                            ,initSeed: initSeed
                            ,shuffle: shuffle
                            ,init: init
                            ,view: view
                            ,getOpenCards: getOpenCards
                            ,countOpenAllCards: countOpenAllCards
                            ,areIdentical: areIdentical
                            ,lockIfIdentical: lockIfIdentical
                            ,updateCardStatus: updateCardStatus
                            ,updateCardById: updateCardById
                            ,countOpenCards: countOpenCards
                            ,closeAllCards: closeAllCards
                            ,checkAndLock: checkAndLock
                            ,update: update};
   return _elm.MemoryGame.values;
};